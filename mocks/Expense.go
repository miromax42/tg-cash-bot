// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	repo "gitlab.ozon.dev/miromaxxs/telegram-bot/repo"
)

// Expense is an autogenerated mock type for the Expense type
type Expense struct {
	mock.Mock
}

// CreateExpense provides a mock function with given fields: ctx, req
func (_m *Expense) CreateExpense(ctx context.Context, req repo.CreateExpenseReq) (*repo.CreateExpenseResp, error) {
	ret := _m.Called(ctx, req)

	var r0 *repo.CreateExpenseResp
	if rf, ok := ret.Get(0).(func(context.Context, repo.CreateExpenseReq) *repo.CreateExpenseResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repo.CreateExpenseResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.CreateExpenseReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserExpense provides a mock function with given fields: ctx, req
func (_m *Expense) ListUserExpense(ctx context.Context, req repo.ListUserExpenseReq) (repo.ListUserExpenseResp, error) {
	ret := _m.Called(ctx, req)

	var r0 repo.ListUserExpenseResp
	if rf, ok := ret.Get(0).(func(context.Context, repo.ListUserExpenseReq) repo.ListUserExpenseResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.ListUserExpenseResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.ListUserExpenseReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewExpense interface {
	mock.TestingT
	Cleanup(func())
}

// NewExpense creates a new instance of Expense. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExpense(t mockConstructorTestingTNewExpense) *Expense {
	mock := &Expense{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
